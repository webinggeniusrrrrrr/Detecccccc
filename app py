import cv2
import mediapipe as mp
import math

# Initialize Mediapipe FaceMesh
mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils
face_mesh = mp_face_mesh.FaceMesh()

# Start webcam
cap = cv2.VideoCapture(0)

# Estimate face shape
def get_face_shape(landmarks, image_w, image_h):
    jaw = [landmarks[i] for i in range(0, 17)]
    jaw_width = math.dist((jaw[0].x * image_w, jaw[0].y * image_h),
                          (jaw[-1].x * image_w, jaw[-1].y * image_h))
    face_height = math.dist((landmarks[10].x * image_w, landmarks[10].y * image_h),
                            (landmarks[152].x * image_w, landmarks[152].y * image_h))
    ratio = jaw_width / face_height if face_height else 0

    if ratio < 0.9:
        return "Oval"
    elif 0.9 <= ratio <= 1.1:
        return "Round"
    else:
        return "Square"

# Main loop
while True:
    success, frame = cap.read()
    if not success:
        break

    h, w, _ = frame.shape
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = face_mesh.process(rgb)

    if result.multi_face_landmarks:
        for face_landmarks in result.multi_face_landmarks:
            mp_drawing.draw_landmarks(frame, face_landmarks, mp_face_mesh.FACEMESH_TESSELATION)

            x_coords = [lm.x for lm in face_landmarks.landmark]
            y_coords = [lm.y for lm in face_landmarks.landmark]
            x_min = int(min(x_coords) * w)
            x_max = int(max(x_coords) * w)
            y_min = int(min(y_coords) * h)
            y_max = int(max(y_coords) * h)

            face_width = x_max - x_min
            face_height = y_max - y_min
            shape = get_face_shape(face_landmarks.landmark, w, h)

            cv2.rectangle(frame, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)
            cv2.putText(frame, f"Size: {face_width}x{face_height}", (x_min, y_min - 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            cv2.putText(frame, f"Shape: {shape}", (x_min, y_min - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

    cv2.imshow("Face Size and Shape Detector", frame)
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

cap.release()
cv2.destroyAllWindows()
